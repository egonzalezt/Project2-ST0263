"use strict";(self.webpackChunkproject_2=self.webpackChunkproject_2||[]).push([[316],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),m=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=m(e.components);return o.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=m(t),d=a,g=u["".concat(l,".").concat(d)]||u[d]||c[d]||r;return t?o.createElement(g,s(s({ref:n},p),{},{components:t})):o.createElement(g,s({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var m=2;m<r;m++)s[m]=t[m];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5202:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return c}});var o=t(7462),a=t(3366),r=(t(7294),t(3905)),s=["components"],i={},l="Mongodb SETUP",m={unversionedId:"mongo-db/setup",id:"mongo-db/setup",title:"Mongodb SETUP",description:"Understanding Mongodb Replica set",source:"@site/docs/mongo-db/setup.md",sourceDirName:"mongo-db",slug:"/mongo-db/setup",permalink:"/Project2-ST0263/docs/mongo-db/setup",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mongo-db/setup.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Mongodb Replicaset",permalink:"/Project2-ST0263/docs/category/mongodb-replicaset"},next:{title:"VPC",permalink:"/Project2-ST0263/docs/category/vpc"}},p={},c=[{value:"Understanding Mongodb Replica set",id:"understanding-mongodb-replica-set",level:2},{value:"Setup",id:"setup",level:2},{value:"EC2",id:"ec2",level:3},{value:"Security group",id:"security-group",level:4},{value:"Instance setup",id:"instance-setup",level:4},{value:"Install Mongodb",id:"install-mongodb",level:3},{value:"Create super user",id:"create-super-user",level:4},{value:"Mongo conf",id:"mongo-conf",level:4},{value:"Test Mongodb",id:"test-mongodb",level:4},{value:"Configure replicas",id:"configure-replicas",level:2},{value:"Configure Replica set",id:"configure-replica-set",level:2},{value:"Setup MongoConnection for Mongoose",id:"setup-mongoconnection-for-mongoose",level:2},{value:"Results",id:"results",level:2}],u={toc:c};function d(e){var n=e.components,t=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mongodb-setup"},"Mongodb SETUP"),(0,r.kt)("h2",{id:"understanding-mongodb-replica-set"},"Understanding Mongodb Replica set"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},'"A replica set is a group of mongod instances that maintain the same data set. A replica set contains several data bearing nodes and optionally one arbiter node. Of the data bearing nodes, one and only one member is deemed the primary node, while the other nodes are deemed secondary nodes."')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},'"The primary node receives all write operations. A replica set can have only one primary capable of confirming writes with { w: "majority" } write concern; although in some circumstances, another mongod instance may transiently believe itself to also be primary. ',"[1]",' The primary records all changes to its data sets in its operation log, i.e. oplog."')),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/53051438/167983616-d617239c-c9ed-4fb7-9d84-adf585113783.png",alt:"image"})),(0,r.kt)("p",null,"also mongodb can add an arbiter who choose with replica or mongodb secondary db transform to the primary db if the primary db fails."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},'"An arbiter participates in elections but does not hold data, arbiter will always be an arbiter whereas a primary may step down and become a secondary and a secondary may become the primary during an election."')),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/53051438/167984052-50898de6-9272-4489-874b-c2aa22e009fe.png",alt:"image"})),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/replication/"},"Recovered from mongodb Manual")),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("h3",{id:"ec2"},"EC2"),(0,r.kt)("p",null,"Mongo db will be deployed on Amazon AWS EC2."),(0,r.kt)("h4",{id:"security-group"},"Security group"),(0,r.kt)("h4",{id:"instance-setup"},"Instance setup"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"VPC"),": VPC-CMS"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Subnet"),": Private Subnet 1"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Auto-assign Public IP"),": Disable"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Firewall (security groups)"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Common Security Groups",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u201cMongo-SG\u201d")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Configure storage"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"1 x 8 Gib gp2 root volume")),(0,r.kt)("h3",{id:"install-mongodb"},"Install Mongodb"),(0,r.kt)("p",null,"Follow the guide provided by Mongodb team to install Mongodb Community edition on your AWS EC2 Machine ",(0,r.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/"},"Setup Mongo")),(0,r.kt)("h4",{id:"create-super-user"},"Create super user"),(0,r.kt)("p",null,"afther mongodb installation is done inside your EC2 machine please run "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mongo\n")),(0,r.kt)("p",null,"inside mongoshell run this to create admin user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongo"},'> use admin\n> db.createUser(\n    {\n        user: "youradminusedr",\n        pwd: "yourbestpassword",\n        roles: [ "root" ]\n    }\n)\n> exit\n')),(0,r.kt)("p",null,"When the user is created mongo replica set needs a special key to talk with the other replica sets to make that is necesary to run these commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'sudo sh -c "openssl rand -base64 756 > /etc/mongod-key"\nsudo chmod 400 /etc/mongod-key\n')),(0,r.kt)("p",null,"Now Mongo didn't recognice the key because doesn't have permissions to access to the key"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"admin@ip-172-31-31-50:~$ ls -l /etc/mongod-key\n-r-------- 1 root root 1024 May 12 00:04 /etc/mongod-key\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Give permissions to mongodb")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chown -R mongodb /etc/mongod-key\nsudo systemctl restart mongod\nsudo systemctl status mongod\n")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/53051438/167985225-73136afc-0122-43fa-8262-76960a2a0089.png",alt:"image"})),(0,r.kt)("p",null,"when the user is created and the key is necesary to change mongodb conf file to enable authentication and config replica set"),(0,r.kt)("h4",{id:"mongo-conf"},"Mongo conf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/mongod.conf\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongo"},'# mongod.conf\n\n# for documentation of all options, see:\n#   http://docs.mongodb.org/manual/reference/configuration-options/\n\n# Where and how to store data.\nstorage:\n  dbPath: /var/lib/mongodb\n  journal:\n    enabled: true\n#  engine:\n#  wiredTiger:\n\n# where to write logging data.\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n\n# network interfaces\nnet:\n  port: 27017\n  bindIp: 127.0.0.1,<EC2 PRIVATE IP>\n\n\n# how the process runs\nprocessManagement:\n  timeZoneInfo: /usr/share/zoneinfo\n\nsecurity:\n  authorization: "enabled"\n  keyFile: /etc/mongod-key\n\n#operationProfiling:\n\nreplication:\n  replSetName: myreplicasetname\n#sharding:\n\n## Enterprise-Only Options:\n\n#auditLog:\n\n#snmp:\n\n')),(0,r.kt)("h4",{id:"test-mongodb"},"Test Mongodb"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'admin@ip-x-x-x-x:~$ mongo -u youradminusedr -p yourbestpassword\nMongoDB shell version v5.0.8\nconnecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb\nImplicit session: session { "id" : UUID("7c503506-5f17-44d9-8e83-86bce24ee46a") }\nMongoDB server version: 5.0.8\n================\nWarning: the "mongo" shell has been superseded by "mongosh",\nwhich delivers improved usability and compatibility.The "mongo" shell has been deprecated and will be removed in\nan upcoming release.\nFor installation instructions, see\nhttps://docs.mongodb.com/mongodb-shell/install/\n================\n')),(0,r.kt)("h2",{id:"configure-replicas"},"Configure replicas"),(0,r.kt)("p",null,"To facilitate the work create AWS AMI to make deploy the same mongodb machine"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/53051438/167986949-ebcb544e-fa28-4068-88d5-71b8a2ab756c.png",alt:"image"})),(0,r.kt)("p",null,"On EC2 Dashboard go to your instances, select your EC2 machine:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/53051438/167987543-d1190b34-64b4-46bd-b89d-9e6476fa4958.png",alt:"mongo"})),(0,r.kt)("p",null,"Set name and description"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/53051438/167987634-38c8c1d6-fafb-4ea1-9ddb-8d8828e7a78c.png",alt:"image"})),(0,r.kt)("p",null,"on EC2 dashboard go to AMIs"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/53051438/167987697-9edc8d6e-1bb9-42a3-b825-0c4779965c5b.png",alt:"image"})),(0,r.kt)("p",null,"Select your AMI and select ",(0,r.kt)("strong",{parentName:"p"},"Launch instance from AMI"),"\n",(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/53051438/167987774-8cee2111-cd55-444b-820a-cc1aee2c3bc3.png",alt:"image"})),(0,r.kt)("p",null,"Configure 2 new instances and choose the security group for the machines."),(0,r.kt)("h2",{id:"configure-replica-set"},"Configure Replica set"),(0,r.kt)("p",null,"Access to your main principal mongodb replica set"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"admin@ip-x-x-x-x:~$ mongo -u youradminusedr -p yourbestpassword\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongo"},'> rs.initiate(\n...     { \n...         _id: "myreplicasetname",\n...         members: [\n...             {\n...                 _id: 0,\n...                 host: "<PrimaryReplicaIP>:27017"\n...             }, { \n...                 _id: 1,\n...                 host: "<SecondaryReplicaIP>:27017"\n...             }, {\n...                 _id: 2,\n...                 host: "<SecondaryReplicaIP>:27017"\n...             }\n...         ]\n...     }\n... )\n{ "ok" : 1 }\nmyreplicasetname:SECONDARY> exit\nbye\n')),(0,r.kt)("p",null,"Now add the user who manage the bookstore schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"admin@ip-x-x-x-x:~$ mongo -u youradminusedr -p yourbestpassword\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongo"},'myreplicasetname:PRIMARY> use bookstore\nswitched to db bookstore\n\nmyreplicasetname:PRIMARY> db.createUser(\n...     {\n...         user: "yourbookstoreadmin",\n...         pwd: "yoursupersecretpassword",\n...               roles: [\n...                 { role: "userAdmin", db: "bookstore" },\n...                 { role: "dbAdmin",   db: "bookstore" },\n...                 { role: "readWrite", db: "bookstore" }\n...              ]\n...     }\n... )\nSuccessfully added user: {\n    "user" : "yourbookstoreadmin",\n    "roles" : [\n        {\n            "role" : "userAdmin",\n            "db" : "bookstore"\n        },\n        {\n            "role" : "dbAdmin",\n            "db" : "bookstore"\n        },\n        {\n            "role" : "readWrite",\n            "db" : "bookstore"\n        }\n    ]\n}\nmyreplicasetname:PRIMARY> exit\nbye\n')),(0,r.kt)("h2",{id:"setup-mongoconnection-for-mongoose"},"Setup MongoConnection for Mongoose"),(0,r.kt)("p",null,"To connect to mongodb please go to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/egonzalezt/Project2-ST0263/tree/main/VPC"},"Setup VPC")," when VPC is ready add to your code the connection url for mongodb"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"mongodb://yourbookstoreadmin:yoursupersecretpassword@<PrimaryIP>:27017,<SecondaryIP>:27017,<SecondaryIP>:27017/bookstore?authSource=bookstore&replicaSet=myreplicasetname")),(0,r.kt)("h2",{id:"results"},"Results"),(0,r.kt)("p",null,"If you follow all the steps mongodb replica set was sucessfully created a simple way to check if replica set is sucessfully created run on mongoshell"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongo"},'myreplicasetname:PRIMARY> rs.status()\n{\n    "set" : "myreplicasetname",\n    "date" : ISODate("2022-05-12T03:55:42.955Z"),\n    "myState" : 1,\n    "term" : NumberLong(1),\n    "syncSourceHost" : "",\n    "syncSourceId" : -1,\n    "heartbeatIntervalMillis" : NumberLong(2000),\n    "majorityVoteCount" : 2,\n    "writeMajorityCount" : 2,\n    "votingMembersCount" : 3,\n    "writableVotingMembersCount" : 3,\n    "optimes" : {\n        "lastCommittedOpTime" : {\n            "ts" : Timestamp(1652327741, 1),\n            "t" : NumberLong(1)\n        },\n        "lastCommittedWallTime" : ISODate("2022-05-12T03:55:41.454Z"),\n        "readConcernMajorityOpTime" : {\n            "ts" : Timestamp(1652327741, 1),\n            "t" : NumberLong(1)\n        },\n        "appliedOpTime" : {\n            "ts" : Timestamp(1652327741, 1),\n            "t" : NumberLong(1)\n        },\n        "durableOpTime" : {\n            "ts" : Timestamp(1652327741, 1),\n            "t" : NumberLong(1)\n        },\n        "lastAppliedWallTime" : ISODate("2022-05-12T03:55:41.454Z"),\n        "lastDurableWallTime" : ISODate("2022-05-12T03:55:41.454Z")\n    },\n    "lastStableRecoveryTimestamp" : Timestamp(1652327691, 1),\n    "electionCandidateMetrics" : {\n        "lastElectionReason" : "electionTimeout",\n        "lastElectionDate" : ISODate("2022-05-12T01:17:01.101Z"),\n        "electionTerm" : NumberLong(1),\n        "lastCommittedOpTimeAtElection" : {\n            "ts" : Timestamp(1652318210, 1),\n            "t" : NumberLong(-1)\n        },\n        "lastSeenOpTimeAtElection" : {\n            "ts" : Timestamp(1652318210, 1),\n            "t" : NumberLong(-1)\n        },\n        "numVotesNeeded" : 2,\n        "priorityAtElection" : 1,\n        "electionTimeoutMillis" : NumberLong(10000),\n        "numCatchUpOps" : NumberLong(0),\n        "newTermStartDate" : ISODate("2022-05-12T01:17:01.145Z"),\n        "wMajorityWriteAvailabilityDate" : ISODate("2022-05-12T01:17:02.243Z")\n    },\n    "members" : [\n        {\n            "_id" : 0,\n            "name" : "x.x.x.x:27017",\n            "health" : 1,\n            "state" : 1,\n            "stateStr" : "PRIMARY",\n            "uptime" : 10671,\n            "optime" : {\n                "ts" : Timestamp(1652327741, 1),\n                "t" : NumberLong(1)\n            },\n            "optimeDate" : ISODate("2022-05-12T03:55:41Z"),\n            "lastAppliedWallTime" : ISODate("2022-05-12T03:55:41.454Z"),\n            "lastDurableWallTime" : ISODate("2022-05-12T03:55:41.454Z"),\n            "syncSourceHost" : "",\n            "syncSourceId" : -1,\n            "infoMessage" : "",\n            "electionTime" : Timestamp(1652318221, 1),\n            "electionDate" : ISODate("2022-05-12T01:17:01Z"),\n            "configVersion" : 1,\n            "configTerm" : 1,\n            "self" : true,\n            "lastHeartbeatMessage" : ""\n        },\n        {\n            "_id" : 1,\n            "name" : "x.x.x.x:27017",\n            "health" : 1,\n            "state" : 2,\n            "stateStr" : "SECONDARY",\n            "uptime" : 9532,\n            "optime" : {\n                "ts" : Timestamp(1652327731, 1),\n                "t" : NumberLong(1)\n            },\n            "optimeDurable" : {\n                "ts" : Timestamp(1652327731, 1),\n                "t" : NumberLong(1)\n            },\n            "optimeDate" : ISODate("2022-05-12T03:55:31Z"),\n            "optimeDurableDate" : ISODate("2022-05-12T03:55:31Z"),\n            "lastAppliedWallTime" : ISODate("2022-05-12T03:55:41.454Z"),\n            "lastDurableWallTime" : ISODate("2022-05-12T03:55:41.454Z"),\n            "lastHeartbeat" : ISODate("2022-05-12T03:55:41.158Z"),\n            "lastHeartbeatRecv" : ISODate("2022-05-12T03:55:41.157Z"),\n            "pingMs" : NumberLong(0),\n            "lastHeartbeatMessage" : "",\n            "syncSourceHost" : "172.31.31.50:27017",\n            "syncSourceId" : 0,\n            "infoMessage" : "",\n            "configVersion" : 1,\n            "configTerm" : 1\n        },\n        {\n            "_id" : 2,\n            "name" : "x.x.x.x:27017",\n            "health" : 1,\n            "state" : 2,\n            "stateStr" : "SECONDARY",\n            "uptime" : 9532,\n            "optime" : {\n                "ts" : Timestamp(1652327731, 1),\n                "t" : NumberLong(1)\n            },\n            "optimeDurable" : {\n                "ts" : Timestamp(1652327731, 1),\n                "t" : NumberLong(1)\n            },\n            "optimeDate" : ISODate("2022-05-12T03:55:31Z"),\n            "optimeDurableDate" : ISODate("2022-05-12T03:55:31Z"),\n            "lastAppliedWallTime" : ISODate("2022-05-12T03:55:41.454Z"),\n            "lastDurableWallTime" : ISODate("2022-05-12T03:55:41.454Z"),\n            "lastHeartbeat" : ISODate("2022-05-12T03:55:41.160Z"),\n            "lastHeartbeatRecv" : ISODate("2022-05-12T03:55:41.158Z"),\n            "pingMs" : NumberLong(0),\n            "lastHeartbeatMessage" : "",\n            "syncSourceHost" : "172.31.31.50:27017",\n            "syncSourceId" : 0,\n            "infoMessage" : "",\n            "configVersion" : 1,\n            "configTerm" : 1\n        }\n    ],\n    "ok" : 1,\n    "$clusterTime" : {\n        "clusterTime" : Timestamp(1652327741, 1),\n        "signature" : {\n            "hash" : BinData(0,"NUpBGMX/PNBGjoRrj6PYaEEVrZ4="),\n            "keyId" : NumberLong("7096652721779900420")\n        }\n    },\n    "operationTime" : Timestamp(1652327741, 1)\n}\n')))}d.isMDXComponent=!0}}]);